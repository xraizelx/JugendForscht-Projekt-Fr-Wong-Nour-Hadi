// -------------------------------------------------------------------------------------- //
// Capacitive Liquid Level Sensing (4): Analog to Digital (1)                           //
// https://robertssmorgasbord.net                                                         //
// https://www.youtube.com/@robertssmorgasbord                                            //
// -------------------------------------------------------------------------------------- //

const byte sense_pin = 21;      // Der Pin, an dem der Sensor angeschlossen ist
const byte drive_pin = 20;      // Der Pin, der das Signal für das Capacitive Sensing steuert

const unsigned int measurement_period = 500;     // Messperiode in Millisekunden
const unsigned int threshhold_low = 256;         // Schwellenwert für den niedrigen Wert, etwa 1.25V (10-Bit ADC-Werte)
const unsigned int threshhold_high = 767;        // Schwellenwert für den hohen Wert, etwa 3.75V (10-Bit ADC-Werte)
// const float conversion_factor = 1.299;          // Umrechnungsfaktor von Oszillationsperiode (µs) zu Volumen (ml)
// const float conversion_offset = -27.401;        // Offset zur Umrechnung in Volumen (ml)

void setup()
{
   Serial.begin(9600L);        // Serielle Kommunikation mit 9600 Baudrate
   while (!Serial);            // Warte auf die serielle Kommunikation

   pinMode(sense_pin, INPUT);  // Setze den Sensor-Pin als Eingabe (für die Messung)
   pinMode(drive_pin, OUTPUT); // Setze den Drive-Pin als Ausgabe (für das Steuersignal)
}

void loop()
{
   byte drive_pin_level;       // Variable, die den Zustand des Drive-Pins speichert (HIGH oder LOW)
   unsigned int cycles;        // Zähler für die Anzahl der Zyklen
   unsigned long measurement_finish; // Zeitpunkt, wann die Messung abgeschlossen sein sollte (basierend auf der Messperiode)
   
   cycles = 0;                  // Initialisiere den Zähler auf 0
   drive_pin_level = LOW;       // Setze den Drive-Pin auf LOW, um zu starten (Signal wird deaktiviert)
   measurement_finish = millis() + measurement_period; // Berechne, wann die Messung beendet sein soll

   digitalWrite(drive_pin, drive_pin_level); // Setze den Drive-Pin auf den initialen Zustand (LOW)

   while (measurement_finish > millis()) // Solange die Messperiode noch nicht abgelaufen ist
   {
      switch (drive_pin_level)
      {
         case LOW:  if (analogRead(sense_pin) <= threshhold_low)  // Wenn der Sensor-Wert unterhalb des Schwellenwerts für "niedrig" ist
                    {
                       cycles++;  // Erhöhe die Anzahl der Zyklen
                       drive_pin_level = HIGH; // Schalte den Drive-Pin auf HIGH (Signal aktivieren)
                       digitalWrite(drive_pin, drive_pin_level);  // Setze den Drive-Pin auf HIGH
                    }
                    break;

         case HIGH: if (analogRead(sense_pin) >= threshhold_high) // Wenn der Sensor-Wert über dem Schwellenwert für "hoch" ist
                    {
                       drive_pin_level = LOW; // Schalte den Drive-Pin auf LOW (Signal deaktivieren)
                       digitalWrite(drive_pin, drive_pin_level); // Setze den Drive-Pin auf LOW
                    }
                    break;
      }
   }

   // Gebe die Anzahl der Zyklen, die Frequenz und die Zeit pro Zyklus aus
   Serial.print(cycles); // Ausgabe der Anzahl der Zyklen
   Serial.print("CY | ");
   Serial.print((float)cycles / measurement_period * 1000, 1); // Berechne und gebe die Frequenz in Hz aus
   Serial.print("Hz | ");
   Serial.print((float)measurement_period / cycles * 1000, 1); // Berechne und gebe die Zeit pro Zyklus in µs aus
   Serial.print("us | ");
   // Serial.print(((float)measurement_period / cycles * 1000) * conversion_factor + conversion_offset, 1);  // Umrechnung auf Volumen (ml) - auskommentiert
   // Serial.print("ml"); // Ausgabe der Volumenangabe (auskommentiert)

   Serial.println("");  // Neue Zeile für die nächste Messung
}

/* Erklärung

sense_pin: Der Pin, an dem der Sensor angeschlossen ist, um den Flüssigkeitsstand zu messen.
drive_pin: Der Pin, der das Signal für das Capacitive Sensing steuert. Es wird verwendet, um den Sensor zu aktivieren oder zu deaktivieren.
measurement_period: Bestimmt die Dauer der Messung in Millisekunden. Dies legt fest, wie lange der Code misst, bevor er die nächste Messung durchführt.
threshhold_low: Der Schwellenwert, unter dem der Sensor als "niedrig" betrachtet wird (z. B. 1.25V).
threshhold_high: Der Schwellenwert, über dem der Sensor als "hoch" betrachtet wird (z. B. 3.75V).
Die Funktion loop() liest kontinuierlich den Sensorwert und prüft, ob dieser über oder unter den Schwellenwerten liegt. Wenn dies der Fall ist, wird der drive_pin zwischen HIGH und LOW gewechselt, und die Anzahl der Zyklen wird erhöht. */